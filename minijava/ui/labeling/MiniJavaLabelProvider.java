/*
 * generated by Xtext 2.25.0
 */
package org.xtext.projects.minijava.ui.labeling;

import com.google.inject.Inject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.xtext.projects.minijava.miniJava.*;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#label-provider
 */
public class MiniJavaLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public MiniJavaLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
//	String text(Greeting ele) {
//		return "A greeting to " + ele.getName();
//	}
//
//	String image(Greeting ele) {
//		return "Greeting.gif";
//	}
	String text(Goal goal) {
		return "a Goal " + goal.toString();
	}
	String image(Goal goal) {
		return "goal.gif" ;
	}
	String text(ImportDecl importD) {
		return "a import declaration " + importD.toString();
	}
	
	String text(QualifiedName QN) {
		return "a QualifiedName " + QN.toString();
	}
	
/*	String text(QualifiedNameWithWildcard QNwWC) {
		return "a QualifiedNameWithWildcard";
	}*/
	
	String text(ClassDecl classD) {
		return "a class declaration " + classD.toString();
	}
	
	String text(MemberDecl memberD) {
		return "a member declaration "+memberD.toString();
	}
	
	String text(FieldDecl fieldD) {
		return "a fieldD declaration "+fieldD.toString();
	}
	
	String text(MethodDecl methodD) {
		return "a method declaration "+methodD.toString();
	}
	
	String text(Parameter parameter) {
		return "a parameter "+parameter.toString();
	}
	
	String text(VarList varlist) {
		return "a varlist "+varlist.toString();
	}
	
	String text(Symbol symbol) {
		return "a symbol "+symbol.toString();
	}
	
	String text(MJAccessLevel MinijavaAccessLevel) {
		//if(MinijavaAccessLevel == )
			return "a MinijavaAccessLevel declaration " + MinijavaAccessLevel.toString();
	}
	
	String text(Block block) {
		return "a block "+block.toString();
	}
	
	String text(Statement statement) {
		return "a statement "+statement.toString();
	}
	
	String text(VarDecl varD) {
		return "a var declaration "+varD.toString();
	}
	
	String text(CommonTypeDecl commontypeD) {
		return "a commontype declaration "+commontypeD.toString();
	}
	
	String text(VarListTypeDecl varlisttypeD) {
		return "a varlisttype declaration "+varlisttypeD.toString();
	}
	
	String text(Return returnD) {
		return "a return "+returnD.toString();
	}
	
	String text(IfStatement ifS) {
		return "an if statment "+ifS.toString();
	}
	
	String text(WhileStatement whileS) {
		return "a while statement "+whileS.toString();
	}
	
	String text(Expression expression) {
		return "an expression "+expression.toString();
	}
	
	String text(Type type) {
		return "a type "+type.toString();
	}
	
	String text(CommonType commontype) {
		return "a commontype "+commontype.toString();
	}
	
	String text(VarListType varlisttype) {
		return "a varlisttype "+varlisttype.toString();
	}
}
